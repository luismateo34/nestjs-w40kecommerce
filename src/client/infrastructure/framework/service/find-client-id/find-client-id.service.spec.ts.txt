import { Test, TestingModule } from '@nestjs/testing';
import { FindClientIdService, check } from './find-client-id.service';
import { OrderPurchase } from 'src/purchase/domain/entity/entityInterfaceOrder';
import { client } from 'src/client/domain/entity/entityInterfaceClient';
import { FindMethod } from 'src/client/application/usecase/find';

class findMock {
  async Get_Client_Id(id: string): Promise<client> {
    if (typeof id === 'string') {
      const resp = {
        id: '1',
        name: 'gato',
        lastname: 'gordo',
      } as client;
      return resp;
    }
  }
  async Get_Client_Order_Purchase(clientId: string): Promise<OrderPurchase[]> {
    if (typeof clientId === 'string') {
      const obj = {} as OrderPurchase;
      return [obj];
    }
  }
}

describe('FindClientIdService', () => {
  let service: FindClientIdService;

  beforeEach(async () => {
    const module: TestingModule = await Test.createTestingModule({
      providers: [
        {
          provide: FindClientIdService,
          useValue: new FindClientIdService(new findMock() as FindMethod),
        },
      ],
    }).compile();

    service = module.get<FindClientIdService>(FindClientIdService);
  });

  it('should be defined', () => {
    expect(service).toBeDefined();
  });
  it('should be return orderpurchase', async () => {
    const resp = await service.find_Orderpurchase_by_id('1');
    expect(resp).toBeDefined();
  });
  it('should be return orderpurchase, not null', async () => {
    const resp = await service.find_Orderpurchase_by_id('1');
    expect(resp !== null).toBe(true);
  });
  it('should be return check', async () => {
    const resp = await service.find_Orderpurchase_by_id('1');
    expect(resp !== null && resp.length > 0).toBe(true);
  });
  it('should be return check', async () => {
    const resp = await service.find_Orderpurchase_by_id('1');
    const el = resp.map((el) => el.id);
    expect(el.length > 0).toBe(true);
  });
});
